#
# Copyright (c) 2009 CodeFutures Corporation. All rights reserved.
# 
#

#
# JDBC Open Sharding Protocol driver (jdbc-osp.properties) properties file.
#
# This properties file is used to configure the JDBC Open Sharding Protocol (OSP) driver.
# The JDBC OSP driver delegates all calls to a third-party driver. It optionally supports Shard Analyze Logging
# to record SQL statements and JDBC API calls, which can be utilized for analyzing a database sharding implementation.
# If the driver supports OSP (such as the dbShards/Client driver), this is transparent to the application. In other words
# all drivers are configured the same in this properties file.
#
# The classname for this driver is: com.dbshards.osp.jdbc.OSPDriver
#
# It is a JDBC 4 compatible driver, so it can be loaded directly with the JDBC DriverManager; pre-loading the class with Class.forName() is optional.
#
# For stand-alone shard analyze logging, include this jar file on the classpath of your application:
#
# jdbc-osp-driver-with-dependencies.jar
#
# For use with dbShards, include this jar on the classpath (in addition to the other dbShards jar files specified with the product):
#
# jdbc-osp-driver.jar
#
#
# The directory containing this file must be on the Java classpath for proper operation.
# If you are running a Java servlet engine, this is typically done by placing this file in:
#
# [yourwebapp]/WEB-INF/classes
#
# Alternatively, if your classpath is loaded by the app server itself (not application specific), you can 
# modify this properties file, and build it into its own jar file with a single resource. Then load that
# according to your app server specifications.
#
# For standalone applications, just add the directory containing this file to the classpath, such as:
#
# /opt/dbshards/conf
# 

#
# The JDBC OSP Driver is used to delegate to a native driver, or to load an OSP driver. In either case the URL syntax is the same.
# There are 2 options for the JDBC URL syntax:
#
# 1) jdbc:osp:[driverClassName]:[vendorName]:[vendorURL]
#
# 2) jdbc:osp:[vendorName]:[vendorURL]
#
# Examples:
# 
# jdbc:osp:mysql://myhost/mydatabase
# jdbc:osp:dbshards://mydomain/mysql/mydatabase
# jdbc:osp:com.somevendor.Driver:somevendor://host/database (for JDBC 2 or JDBC 3 compatible drivers) 
#

# Option 2) will work for JDBC 4 compliant drivers, and Option 1) should work for all drivers regardless of the JDBC level they support. 

# Specify a log file (including the path). If no log.file is specified, logging goes to STDOUT.
#log.file=/var/log/ospdriver/jdbc-osp-driver-system.log

# JDBC OSP driver
# Valid logging levels are: INFO|DEBUG|TRACE
org.opensharding.jdbc=INFO 

# SHARD ANALYZE LOG
# Optionally configure Shard Analyze logging.

# If set to true, the driver will generate a shard analyze log. 
# Note that the shard analyze log creates a log entry for every API call made by the driver,
# therefore this should only be run in a test environment, as performance is adversely affected. 
shard.analyze.log=true

# If set to true, the driver will log data values.
shard.analyze.log.data=true

# Directory to write the shard analyze logs. Defaults to current working directory.
shard.analyze.log.dir=/var/log/jdbc-osp-analyze

# Maximum size in bytes of a single shard analyze log file. Defaults to 10MB.
shard.analyze.log.limit=10485760

# Maximum number of shard analyze log files to generate. Defaults to 100. 
shard.analyze.log.maxfiles=100

# Maximum number of hours to run the logging driver. 0 indicates no limit.
shard.analyze.log.maxhours=0


